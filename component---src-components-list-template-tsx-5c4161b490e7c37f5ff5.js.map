{"version":3,"sources":["webpack:///./src/components/listTemplate.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/util/slug.ts","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/util/backgroundPath.ts","webpack:///./src/components/backgroundLink.tsx"],"names":["getThumbnail","thumbnailUrls","imageFileName","find","t","indexOf","split","LevelListEntry","_ref","thumbnailUrl","levelName","gameNameUsa","developer","system","react__WEBPACK_IMPORTED_MODULE_9___default","a","createElement","src","query","ListTemplate","_ref2","ignorePrefix","data","_ref2$pageContext","pageContext","listType","listTypeValue","levels","edges","map","e","node","byGame","groupBy","className","styles","root","Object","keys","sort","b","aValue","replace","bValue","localeCompare","gameName","gameHeader","key","level","_backgroundLink__WEBPACK_IMPORTED_MODULE_10__","assign","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","__webpack_exports__","React","createContext","m","module","exports","require","default","slug","slugify__WEBPACK_IMPORTED_MODULE_0__","slugify__WEBPACK_IMPORTED_MODULE_0___default","str","slugify","remove","lower","ProdPageRenderer","location","pageResources","InternalPageRenderer","json","backgroundPath","_slug__WEBPACK_IMPORTED_MODULE_0__","join","BackgroundLink","gatsby__WEBPACK_IMPORTED_MODULE_1__","_util_backgroundPath__WEBPACK_IMPORTED_MODULE_2__","newPage","children","entryPath","href","target","to"],"mappings":"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","file":"component---src-components-list-template-tsx-5c4161b490e7c37f5ff5.js","sourcesContent":["import React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { BackgroundLink } from \"./backgroundLink\";\nimport { groupBy } from \"lodash\";\n\nimport styles from \"./listTemplate.module.css\";\n\nfunction by(key: string) {\n    return function sortByKey(a: { [key: string]: string }, b: { [key: string]: string }): number {\n        return a[key].localeCompare(b[key]);\n    };\n}\n\nfunction byIgnorePrefix(ignorePrefix: RegExp) {\n    return function(a: string, b: string): number {\n        const aValue = a.replace(ignorePrefix, \"\");\n        const bValue = b.replace(ignorePrefix, \"\");\n\n        return aValue.localeCompare(bValue);\n    };\n}\n\nfunction root(filename: string): string {\n    return filename.split(\".\")[0];\n}\n\nfunction getThumbnail(thumbnailUrls: string[], imageFileName: string): string {\n    return thumbnailUrls.find(t => t.indexOf(root(imageFileName)) > -1);\n}\n\nconst LevelListEntry: React.FunctionComponent = ({ thumbnailUrl, levelName, gameNameUsa, developer, system }) => {\n    return (\n        <div>\n            <img src={thumbnailUrl} />\n            {levelName} - {gameNameUsa} - {developer} - {system}\n        </div>\n    );\n};\n\nconst ListTemplate: React.FunctionComponent = ({ data, pageContext: { listType, listTypeValue, thumbnailUrls } }) => {\n    const levels = data.levels.edges.map(e => e.node);\n\n    const byGame = groupBy(levels, \"gameNameUsa\");\n\n    return (\n        <div className={styles.root}>\n            <h1>\n                {listType}: {listTypeValue}\n            </h1>\n            <ul>\n                {Object.keys(byGame)\n                    .sort(byIgnorePrefix(/^the /i))\n                    .map(gameName => {\n                        return (\n                            <li>\n                                <h2 className={styles.gameHeader}>{gameName}</h2>\n                                <ul>\n                                    {byGame[gameName].sort(by(\"levelName\")).map(level => (\n                                        <BackgroundLink {...level}>\n                                            <LevelListEntry\n                                                {...level}\n                                                thumbnailUrl={getThumbnail(thumbnailUrls, level.imageFileName)}\n                                            />\n                                        </BackgroundLink>\n                                    ))}\n                                </ul>\n                            </li>\n                        );\n                    })}\n            </ul>\n        </div>\n    );\n};\n\nexport const query = graphql`\n    query($filter: googleSheetLeveldataRowFilterInput!) {\n        levels: allGoogleSheetLeveldataRow(filter: $filter) {\n            edges {\n                node {\n                    developer\n                    gameNameUsa\n                    levelName\n                    system\n                    imageFileName\n                }\n            }\n        }\n    }\n`;\n\nexport default ListTemplate;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import slugify from \"slugify\";\n\nexport function slug(str: string): string {\n    return slugify(str, { remove: /[*+~.()'\"!:@]/g, lower: true });\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { slug } from \"./slug\";\n\nexport function backgroundPath({ gameNameUsa, levelName }: { gameNameUsa: string; levelName: string }) {\n    return \"/bg:\" + [gameNameUsa, levelName].map(slug).join(\"/\");\n}\n","import React from \"react\";\nimport { Link } from \"gatsby\";\nimport { backgroundPath } from \"../util/backgroundPath\";\n\ninterface BackgroundLinkProps {\n    levelName: string;\n    gameNameUsa: string;\n    newPage?: boolean;\n}\n\nexport const BackgroundLink: React.FunctionComponent<BackgroundLinkProps> = ({\n    levelName,\n    gameNameUsa,\n    newPage,\n    children,\n}) => {\n    const entryPath = backgroundPath({ gameNameUsa, levelName });\n\n    children = children || `${gameNameUsa} - ${levelName}`;\n\n    if (newPage) {\n        return (\n            <a href={entryPath} target=\"_blank\">\n                {children}\n            </a>\n        );\n    } else {\n        return <Link to={entryPath}>{children}</Link>;\n    }\n};\n"],"sourceRoot":""}