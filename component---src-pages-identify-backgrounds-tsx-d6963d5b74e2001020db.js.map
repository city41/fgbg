{"version":3,"sources":["webpack:///./src/components/identifyEntry.tsx","webpack:///./src/pages/identify-backgrounds.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.tsx","webpack:///./src/components/layout.tsx","webpack:///./src/components/lazyThumbnail.tsx","webpack:///./src/hooks/useCorrectionForm.ts"],"names":["IdentifyEntry","_ref","form","className","thumbnailData","unknownId","_useCorrectionForm","useCorrectionForm","window","location","pathname","undefined","handleInputChange","handleSubmit","inputs","hasSubmitted","classes","classnames","styles","root","react_default","a","createElement","thankYou","index_esm","inputContainer","htmlFor","readOnly","type","name","value","gameName","onChange","levelName","onClick","e","Fragment","lazyThumbnail","thumbnail","width","alt","IdentifyBackgroundsPage","data","twitterImg","edges","node","childImageSharp","fixed","src","identityDatas","unknowns","map","originalName","replace","dataUrl","base64","publicURL","original","height","fullImageUrl","unknownGifs","find","indexOf","seo","title","description","imageUrl","layout","logoClassName","logo","intro","totalCount","identityEntriesContainer","identityData","identifyEntry_IdentifyEntry","identityEntry","key","query","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","__webpack_exports__","React","createContext","m","module","exports","require","default","ProdPageRenderer","pageResources","InternalPageRenderer","Object","assign","json","SEO","_ref$description","_ref$lang","lang","_ref$meta","meta","site","_public_static_d_1620376682_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","content","property","author","concat","Layout","classnames__WEBPACK_IMPORTED_MODULE_1__","classnames__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_2__","_layout_module_css__WEBPACK_IMPORTED_MODULE_3__","_layout_module_css__WEBPACK_IMPORTED_MODULE_3___default","children","logoClasses","to","LazyThumbnail","react_lazy_load__WEBPACK_IMPORTED_MODULE_2__","react_lazy_load__WEBPACK_IMPORTED_MODULE_2___default","_lazyThumbnail_module_css__WEBPACK_IMPORTED_MODULE_3__","_lazyThumbnail_module_css__WEBPACK_IMPORTED_MODULE_3___default","_ref$width","aspectRatio","style","paddingBottom","lowRes","highRes","lazyImg","offsetBottom","mapToGoogle","system","developer","year","series","url","siteUrl","submissionType","initialState","keys","reduce","building","keyName","BASE_URL","currentPathname","initialData","_useState","useState","setInputs","_useState2","setHasSubmitted","event","preventDefault","fetch","queryString","inputKey","googleKey","encodeURIComponent","join","getGoogleUrl","method","persist","_Object$assign","target"],"mappings":"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","file":"component---src-pages-identify-backgrounds-tsx-d6963d5b74e2001020db.js","sourcesContent":["import React from \"react\";\nimport classnames from \"classnames\";\nimport { FaSmileBeam } from \"react-icons/fa\";\nimport { LazyThumbnail } from \"./lazyThumbnail\";\nimport { useCorrectionForm } from \"../hooks/useCorrectionForm\";\n\nimport styles from \"./identifyEntry.module.css\";\n\ninterface IdentifyEntryProps {\n    className?: string;\n    thumbnailData: {\n        dataUrl: string;\n        publicURL: string;\n        width: number;\n        height: number;\n    };\n    unknownId: string;\n}\n\nexport const IdentifyEntry: React.FunctionComponent<IdentifyEntryProps> = ({ className, thumbnailData, unknownId }) => {\n    const { handleInputChange, handleSubmit, inputs, hasSubmitted }: any = useCorrectionForm(\n        typeof window !== \"undefined\" ? window.location.pathname : undefined,\n        \"identification\",\n        { unknownId }\n    );\n\n    const idEl = process.env.NODE_ENV === \"production\" ? null : <div>{unknownId}</div>;\n\n    const classes = classnames(styles.root, className);\n\n    let form;\n\n    if (hasSubmitted) {\n        form = (\n            <div className={styles.thankYou}>\n                thank you! <FaSmileBeam />\n            </div>\n        );\n    } else {\n        form = (\n            <div className={styles.form}>\n                <div className={styles.inputContainer}>\n                    <label htmlFor=\"gameName\">game name</label>\n                    <input\n                        readOnly={hasSubmitted}\n                        type=\"text\"\n                        name=\"gameName\"\n                        value={inputs.gameName}\n                        onChange={handleInputChange}\n                    />\n                </div>\n                <div className={styles.inputContainer}>\n                    <label htmlFor=\"levelName\">level name</label>\n                    <input\n                        readOnly={hasSubmitted}\n                        type=\"text\"\n                        name=\"levelName\"\n                        value={inputs.levelName}\n                        onChange={handleInputChange}\n                    />\n                </div>\n                <div className={styles.inputContainer}>\n                    <input\n                        type=\"submit\"\n                        value=\"submit\"\n                        onClick={e => {\n                            handleSubmit(e);\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <>\n            <div className={classes}>\n                <LazyThumbnail\n                    className={styles.thumbnail}\n                    thumbnailData={thumbnailData}\n                    width={400}\n                    alt=\"unknown fighting game background\"\n                />\n                {idEl}\n                {form}\n            </div>\n        </>\n    );\n};\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { IdentifyEntry } from \"../components/identifyEntry\";\nimport { IdentifyBackgroundsPageQuery } from \"../graphqlTypes\";\nimport { Layout } from \"../components/layout\";\nimport SEO from \"../components/seo\";\n\nimport styles from \"./identify-backgrounds.module.css\";\n\ninterface IdentifyBackgroundsPageProps {\n    data: IdentifyBackgroundsPageQuery;\n}\n\nconst IdentifyBackgroundsPage: React.FunctionComponent<IdentifyBackgroundsPageProps> = ({ data }) => {\n    const twitterImg = data.twitterImg.edges[0].node.childImageSharp.fixed.src;\n\n    const identityDatas = data.unknowns.edges.map(e => {\n        const originalName = e.node.childImageSharp.fixed.originalName;\n        const unknownId = originalName.replace(\"_static.jpg\", \"\");\n\n        return {\n            unknownId,\n            thumbnailData: {\n                dataUrl: e.node.childImageSharp.dataUrl.base64,\n                publicURL: e.node.childImageSharp.fixed.src,\n                width: e.node.childImageSharp.original.width,\n                height: e.node.childImageSharp.original.height,\n            },\n            fullImageUrl: data.unknownGifs.edges.find(e => e.node.publicURL.indexOf(unknownId) > -1).node.publicURL,\n        };\n    });\n\n    return (\n        <>\n            <SEO\n                title=\"Unknown backgrounds | FGBG\"\n                description=\"help identify these unknown backgrounds from fighting games\"\n                imageUrl={twitterImg}\n            />\n            <Layout logoClassName={styles.logo}>\n                <div className={styles.root}>\n                    <p className={styles.intro}>\n                        Do you know what games these {data.unknowns.totalCount} backgrounds are from? Let us know!\n                    </p>\n                    <div className={styles.identityEntriesContainer}>\n                        {identityDatas.map(identityData => (\n                            <IdentifyEntry\n                                className={styles.identityEntry}\n                                key={identityData.unknownId}\n                                unknownId={identityData.unknownId}\n                                thumbnailData={identityData.thumbnailData}\n                                fullImageUrl={identityData.fullImageUrl}\n                            />\n                        ))}\n                    </div>\n                </div>\n            </Layout>\n        </>\n    );\n};\n\nexport default IdentifyBackgroundsPage;\n\nexport const query = graphql`\n    query IdentifyBackgroundsPage {\n        unknowns: allFile(filter: { relativePath: { regex: \"/bgs/unknown/static/\" } }) {\n            totalCount\n            edges {\n                node {\n                    relativePath\n                    publicURL\n                    childImageSharp {\n                        original {\n                            width\n                            height\n                        }\n                        fixed(height: 200) {\n                            src\n                            originalName\n                        }\n                        dataUrl: fixed(base64Width: 10) {\n                            base64\n                        }\n                    }\n                }\n            }\n        }\n        unknownGifs: allFile(filter: { relativePath: { regex: \"/bgs/unknown/full/\" } }) {\n            edges {\n                node {\n                    publicURL\n                }\n            }\n        }\n        twitterImg: allFile(filter: { relativePath: { regex: \"/bgs/static/kof99_park1/\" } }) {\n            edges {\n                node {\n                    childImageSharp {\n                        fixed(height: 200) {\n                            src\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\ninterface SEOProps {\n    description?: string;\n    lang?: string;\n    meta?: any[];\n    title: string;\n    imageUrl?: string;\n}\n\nconst SEO: React.FunctionComponent<SEOProps> = ({ description = \"\", lang = \"en\", meta = [], title, imageUrl }) => {\n    const { site } = useStaticQuery(\n        graphql`\n            query {\n                site {\n                    siteMetadata {\n                        title\n                        description\n                        author\n                    }\n                }\n            }\n        `\n    );\n\n    const metaDescription = description || site.siteMetadata.description;\n\n    return (\n        <Helmet\n            htmlAttributes={{\n                lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${site.siteMetadata.title}`}\n            meta={[\n                {\n                    name: `description`,\n                    content: metaDescription,\n                },\n                {\n                    property: `og:title`,\n                    content: title,\n                },\n                {\n                    property: `og:description`,\n                    content: metaDescription,\n                },\n                {\n                    property: `og:type`,\n                    content: `website`,\n                },\n                {\n                    name: `twitter:card`,\n                    content: imageUrl ? \"summary_large_image\" : \"summary\",\n                },\n                {\n                    name: `twitter:creator`,\n                    content: site.siteMetadata.author,\n                },\n                {\n                    name: `twitter:title`,\n                    content: title,\n                },\n                {\n                    name: `twitter:description`,\n                    content: metaDescription,\n                },\n                {\n                    name: `twitter:site`,\n                    content: \"@mattegreer\",\n                },\n                imageUrl\n                    ? {\n                          name: `twitter:image`,\n                          content: `https://www.fgbg.art${imageUrl}`,\n                      }\n                    : {},\n            ].concat(meta)}\n        />\n    );\n};\n\nexport default SEO;\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Link } from \"gatsby\";\n\nimport styles from \"./layout.module.css\";\n\ninterface LayoutProps {\n    logoClassName?: string;\n}\n\nexport const Layout: React.FunctionComponent<LayoutProps> = ({ logoClassName, children }) => {\n    const logoClasses = classnames(styles.logo, logoClassName);\n    return (\n        <>\n            <Link to=\"/\">\n                <div className={logoClasses} />\n            </Link>\n            {children}\n        </>\n    );\n};\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport LazyLoad from \"react-lazy-load\";\n\nimport styles from \"./lazyThumbnail.module.css\";\n\ninterface LazyThumbnailProps {\n    className?: string;\n    width?: number;\n    thumbnailData: {\n        dataUrl: string;\n        publicURL: string;\n        width: number;\n        height: number;\n    };\n    alt?: string;\n}\n\nexport const LazyThumbnail: React.FunctionComponent<LazyThumbnailProps> = ({\n    className,\n    width = 200,\n    thumbnailData,\n    alt,\n}) => {\n    const aspectRatio = thumbnailData.height / thumbnailData.width;\n    const classes = classnames(styles.root, className);\n\n    return (\n        <div className={classes} style={{ width, paddingBottom: width * aspectRatio }}>\n            <img className={styles.lowRes} src={thumbnailData.dataUrl} alt={alt} />\n            <noscript>\n                <img className={styles.highRes} src={thumbnailData.publicURL} alt={alt} />\n            </noscript>\n            <LazyLoad className={styles.lazyImg} offsetBottom={400}>\n                <>\n                    <img className={styles.highRes} src={thumbnailData.publicURL} alt={alt} />\n                </>\n            </LazyLoad>\n        </div>\n    );\n};\n","import { useState } from \"react\";\n\nconst mapToGoogle = {\n    levelName: \"entry.1758812684\",\n    gameName: \"entry.1658808931\",\n    system: \"entry.2024056467\",\n    developer: \"entry.726710484\",\n    year: \"entry.906557948\",\n    series: \"entry.1788056905\",\n    url: \"entry.89449791\",\n    siteUrl: \"entry.36955456\",\n    submissionType: \"entry.1271839613\",\n    unknownId: \"entry.1564011080\",\n};\n\nconst initialState = Object.keys(mapToGoogle).reduce<Record<string, string>>((building, keyName) => {\n    building[keyName] = \"\";\n    return building;\n}, {});\n\nconst formId = \"1FAIpQLScSRFk3nVFwV0obvwZsd6H-oAG7SCXM7FsXZ6cU-YsyiqDzAQ\";\nconst BASE_URL = `https://docs.google.com/forms/d/e/${formId}/formResponse?`;\n\nfunction getGoogleUrl(inputs: any): string {\n    const queryParamArray = Object.keys(inputs).reduce<string[]>((building, inputKey) => {\n        const googleKey = mapToGoogle[inputKey as keyof typeof mapToGoogle];\n        const value = encodeURIComponent(inputs[inputKey]);\n\n        return building.concat(`${googleKey}=${value}`);\n    }, []);\n\n    const queryString = queryParamArray.join(\"&\");\n\n    return BASE_URL + queryString;\n}\nexport const useCorrectionForm = (currentPathname: string | undefined, submissionType: string, initialData = {}) => {\n    const [inputs, setInputs] = useState({\n        ...initialState,\n        ...initialData,\n        siteUrl: currentPathname || \"unknown\",\n        submissionType,\n    });\n    const [hasSubmitted, setHasSubmitted] = useState(false);\n\n    const handleSubmit = (event: React.MouseEvent<HTMLInputElement>) => {\n        if (event) {\n            event.preventDefault();\n        }\n\n        fetch(getGoogleUrl(inputs), {\n            method: \"POST\",\n        });\n\n        setHasSubmitted(true);\n    };\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.persist();\n        setInputs(inputs => ({ ...inputs, [event.target.name]: event.target.value }));\n    };\n\n    return {\n        handleSubmit,\n        handleInputChange,\n        inputs,\n        hasSubmitted,\n    };\n};\n"],"sourceRoot":""}