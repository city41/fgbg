{"version":3,"sources":["webpack:///./src/components/listTemplate.tsx","webpack:///./src/util/slug.ts","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/util/backgroundPath.ts","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.tsx","webpack:///./src/util/developerPath.ts","webpack:///./src/util/otherPath.ts","webpack:///./src/util/systemPath.ts","webpack:///./src/util/yearPath.ts","webpack:///./src/util/seriesPath.ts","webpack:///./src/util/gamePath.ts","webpack:///./src/util/fileRoot.ts","webpack:///./src/util/index.ts","webpack:///./src/components/layout.tsx","webpack:///./src/components/lazyThumbnail.tsx","webpack:///./src/util/sort.ts","webpack:///./src/components/backgroundLink.tsx","webpack:///./src/components/levelListEntry.tsx"],"names":["getThumbnail","thumbnails","imageFileName","find","t","publicURL","indexOf","fileRoot","query","ListTemplate","_ref","children","dontGroup","data","_ref$pageContext","pageContext","listTypeValue","description","levels","edges","map","e","node","twitterImageUrl","twitterImg","childImageSharp","fixed","src","byGame","groupBy","gameBody","react__WEBPACK_IMPORTED_MODULE_8___default","a","createElement","level","key","levelName","_levelListEntry__WEBPACK_IMPORTED_MODULE_12__","Object","assign","linkClassName","styles","listEntryLink","className","listEntry","thumbnailData","keys","sort","byIgnoreThe","gameName","gameHeader","byLevelName","Fragment","_seo__WEBPACK_IMPORTED_MODULE_9__","title","imageUrl","_layout__WEBPACK_IMPORTED_MODULE_13__","logoClassName","layoutLogo","root","levelCount","length","noscriptWarning","__webpack_require__","d","__webpack_exports__","slug","slugify__WEBPACK_IMPORTED_MODULE_0__","slugify__WEBPACK_IMPORTED_MODULE_0___default","n","str","slugify","remove","lower","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","React","createContext","m","module","exports","require","default","backgroundPath","_slug__WEBPACK_IMPORTED_MODULE_0__","label","fullscreen","base","gameNameUsa","join","ProdPageRenderer","location","pageResources","InternalPageRenderer","json","SEO","_ref$description","_ref$lang","lang","_ref$meta","meta","site","_public_static_d_1620376682_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","fullMeta","name","content","property","author","concat","fullImageUrl","push","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","developerPath","developer","otherPath","other","systemPath","system","yearPath","year","seriesPath","series","gamePath","filename","split","Layout","classnames__WEBPACK_IMPORTED_MODULE_1__","classnames__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_2__","_layout_module_css__WEBPACK_IMPORTED_MODULE_3__","_layout_module_css__WEBPACK_IMPORTED_MODULE_3___default","logoClasses","classnames","logo","to","LazyThumbnail","react_lazy_load__WEBPACK_IMPORTED_MODULE_2__","react_lazy_load__WEBPACK_IMPORTED_MODULE_2___default","_lazyThumbnail_module_css__WEBPACK_IMPORTED_MODULE_3__","_lazyThumbnail_module_css__WEBPACK_IMPORTED_MODULE_3___default","_ref$width","width","alt","aspectRatio","height","classes","style","paddingBottom","lowRes","dataUrl","highRes","lazyImg","offsetBottom","b","localeCompare","thePrefix","aValue","replace","bValue","BackgroundLink","newPage","entryPath","react_default","href","target","gatsby_browser_entry","levelListEntry_LevelListEntry","LevelListEntry","linkClasses","backgroundLink","backgroundLink_BackgroundLink","lazyThumbnail"],"mappings":"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","file":"component---src-components-list-template-tsx-1b09e432e18b91b28e36.js","sourcesContent":["import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport SEO from \"./seo\";\nimport { groupBy } from \"lodash\";\nimport { fileRoot } from \"../util\";\nimport { LevelListEntry } from \"./levelListEntry\";\nimport { Layout } from \"./layout\";\nimport { byLevelName, byIgnoreThe } from \"../util/sort\";\nimport { ListTemplateQuery } from \"../graphqlTypes\";\n\nimport styles from \"./listTemplate.module.css\";\n\ninterface Thumbnail {\n    publicURL: string;\n    width: number;\n    height: number;\n    dataUrl: string;\n}\n\nfunction getThumbnail(thumbnails: Thumbnail[], imageFileName: string): Thumbnail | undefined {\n    return thumbnails.find(t => t.publicURL.indexOf(fileRoot(imageFileName) + \"_thumb\") > -1);\n}\n\ninterface ListTemplateProps {\n    dontGroup?: boolean;\n    pageContext: {\n        listTypeValue: string;\n        thumbnails: Thumbnail[];\n        description?: string;\n    };\n    data: ListTemplateQuery;\n}\n\nconst ListTemplate: React.FunctionComponent<ListTemplateProps> = ({\n    children,\n    dontGroup,\n    data,\n    pageContext: { listTypeValue, thumbnails, description },\n}) => {\n    const levels = data.levels.edges.map(e => e.node);\n    const twitterImageUrl = data.twitterImg && data.twitterImg.edges[0].node.childImageSharp.fixed.src;\n\n    const byGame = groupBy(levels, \"gameNameUsa\");\n\n    const gameBody = dontGroup ? (\n        <ul>\n            {levels.map(level => (\n                <li key={level.levelName}>\n                    <LevelListEntry\n                        linkClassName={styles.listEntryLink}\n                        className={styles.listEntry}\n                        {...level}\n                        thumbnailData={getThumbnail(thumbnails, level.imageFileName)}\n                    />\n                </li>\n            ))}\n        </ul>\n    ) : (\n        <ul>\n            {Object.keys(byGame)\n                .sort(byIgnoreThe)\n                .map(gameName => {\n                    return (\n                        <li key={gameName}>\n                            {gameName !== listTypeValue && <h2 className={styles.gameHeader}>{gameName}</h2>}\n                            <ul>\n                                {byGame[gameName].sort(byLevelName).map(level => (\n                                    <li key={level.levelName}>\n                                        <LevelListEntry\n                                            linkClassName={styles.listEntryLink}\n                                            className={styles.listEntry}\n                                            {...level}\n                                            thumbnailData={getThumbnail(thumbnails, level.imageFileName)}\n                                        />\n                                    </li>\n                                ))}\n                            </ul>\n                        </li>\n                    );\n                })}\n        </ul>\n    );\n\n    return (\n        <>\n            <SEO\n                title={`${listTypeValue} backgrounds - FGBG`}\n                description=\"fighting game backgrounds website\"\n                imageUrl={twitterImageUrl}\n            />\n            <Layout logoClassName={styles.layoutLogo}>\n                <div className={styles.root}>\n                    <h1>\n                        {listTypeValue}{\" \"}\n                        <span className={styles.levelCount}>\n                            {children || (\n                                <span>\n                                    {levels.length} background{levels.length !== 1 && \"s\"}\n                                </span>\n                            )}\n                        </span>\n                    </h1>\n                    {description && <p>{description}</p>}\n                    <noscript>\n                        <div className={styles.noscriptWarning}>this page loads faster with JavaScript enabled</div>\n                    </noscript>\n                    {gameBody}\n                </div>\n            </Layout>\n        </>\n    );\n};\n\nexport const query = graphql`\n    query ListTemplate($filter: googleSheetLeveldataRowFilterInput!, $seoImageRegex: String!) {\n        levels: allGoogleSheetLeveldataRow(filter: $filter) {\n            edges {\n                node {\n                    developer\n                    gameNameUsa\n                    levelName\n                    system\n                    imageFileName\n                }\n            }\n        }\n        twitterImg: allFile(filter: { relativePath: { regex: $seoImageRegex } }) {\n            edges {\n                node {\n                    childImageSharp {\n                        fixed(height: 200) {\n                            src\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\n\nexport default ListTemplate;\n","import slugify from \"slugify\";\n\nexport function slug(str: string): string {\n    return slugify(str, { remove: /[*+~.()'\"!:@]/g, lower: true });\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import { slug } from \"./slug\";\n\nexport interface BackgroundPathProps {\n    gameNameUsa: string;\n    levelName: string;\n}\n\nexport function backgroundPath({ gameNameUsa, levelName }: BackgroundPathProps, label?: string, fullscreen?: boolean) {\n    let base = \"/game:\" + [gameNameUsa, levelName].map(slug).join(\"/\");\n\n    if (label) {\n        base = [base, slug(label)].join(\"/\");\n    }\n\n    if (fullscreen) {\n        return [base, \"fullscreen\"].join(\"/\");\n    } else {\n        return base;\n    }\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\ninterface SEOProps {\n    description?: string;\n    lang?: string;\n    meta?: any[];\n    title: string;\n    imageUrl?: string;\n}\n\nconst SEO: React.FunctionComponent<SEOProps> = ({ description = \"\", lang = \"en\", meta = [], title, imageUrl }) => {\n    const { site } = useStaticQuery(\n        graphql`\n            query {\n                site {\n                    siteMetadata {\n                        title\n                        description\n                        author\n                    }\n                }\n            }\n        `\n    );\n\n    const metaDescription = description || site.siteMetadata.description;\n\n    const fullMeta = [\n        {\n            name: `description`,\n            content: metaDescription,\n        },\n        {\n            property: `og:title`,\n            content: title,\n        },\n        {\n            property: `og:description`,\n            content: metaDescription,\n        },\n        {\n            property: `og:type`,\n            content: `website`,\n        },\n        {\n            name: `twitter:card`,\n            content: imageUrl ? \"summary_large_image\" : \"summary\",\n        },\n        {\n            name: `twitter:creator`,\n            content: site.siteMetadata.author,\n        },\n        {\n            name: `twitter:title`,\n            content: title,\n        },\n        {\n            name: `twitter:description`,\n            content: metaDescription,\n        },\n        {\n            name: `twitter:site`,\n            content: \"@mattegreer\",\n        },\n    ].concat(meta);\n\n    if (imageUrl) {\n        const fullImageUrl = `https://www.fgbg.art${imageUrl}`;\n\n        fullMeta.push(\n            {\n                name: `twitter:image`,\n                content: fullImageUrl,\n            },\n            {\n                name: \"og:image\",\n                content: fullImageUrl,\n            }\n        );\n    }\n\n    return (\n        <Helmet\n            htmlAttributes={{\n                lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${site.siteMetadata.title}`}\n            meta={fullMeta}\n        />\n    );\n};\n\nexport default SEO;\n","import { slug } from \"./slug\";\n\nexport function developerPath(developer: string) {\n    return \"/developer:\" + slug(developer);\n}\n","import { slug } from \"./slug\";\n\nexport function otherPath(other: string) {\n    return \"/other:\" + slug(other);\n}\n","import { slug } from \"./slug\";\n\nexport function systemPath(system: string) {\n    return \"/system:\" + slug(system);\n}\n","export function yearPath(year: number | null | undefined) {\n    if (year) {\n        return \"/year:\" + year;\n    } else {\n        return \"/year:missing\";\n    }\n}\n","import { slug } from \"./slug\";\n\nexport function seriesPath(series: string) {\n    return \"/series:\" + slug(series);\n}\n","import { slug } from \"./slug\";\n\nexport function gamePath(gameNameUsa: string) {\n    return \"/game:\" + slug(gameNameUsa);\n}\n","export function fileRoot(filename: string): string {\n    return filename.split(\".\")[0];\n}\n","export * from \"./slug\";\nexport * from \"./backgroundPath\";\nexport * from \"./developerPath\";\nexport * from \"./otherPath\";\nexport * from \"./systemPath\";\nexport * from \"./yearPath\";\nexport * from \"./seriesPath\";\nexport * from \"./gamePath\";\nexport * from \"./fileRoot\";\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Link } from \"gatsby\";\n\nimport styles from \"./layout.module.css\";\n\ninterface LayoutProps {\n    logoClassName?: string;\n}\n\nexport const Layout: React.FunctionComponent<LayoutProps> = ({ logoClassName, children }) => {\n    const logoClasses = classnames(styles.logo, logoClassName);\n    return (\n        <>\n            <Link to=\"/\">\n                <div className={logoClasses} />\n            </Link>\n            {children}\n        </>\n    );\n};\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport LazyLoad from \"react-lazy-load\";\n\nimport styles from \"./lazyThumbnail.module.css\";\n\ninterface LazyThumbnailProps {\n    className?: string;\n    width?: number;\n    thumbnailData: {\n        dataUrl: string;\n        publicURL: string;\n        width: number;\n        height: number;\n    };\n    alt?: string;\n}\n\nexport const LazyThumbnail: React.FunctionComponent<LazyThumbnailProps> = ({\n    className,\n    width = 200,\n    thumbnailData,\n    alt,\n}) => {\n    const aspectRatio = thumbnailData.height / thumbnailData.width;\n    const classes = classnames(styles.root, className);\n\n    return (\n        <div className={classes} style={{ width, paddingBottom: width * aspectRatio }}>\n            <img className={styles.lowRes} src={thumbnailData.dataUrl} alt={alt} />\n            <noscript>\n                <img className={styles.highRes} src={thumbnailData.publicURL} alt={alt} />\n            </noscript>\n            <LazyLoad className={styles.lazyImg} offsetBottom={400}>\n                <>\n                    <img className={styles.highRes} src={thumbnailData.publicURL} alt={alt} />\n                </>\n            </LazyLoad>\n        </div>\n    );\n};\n","export function byLevelName(a: { levelName: string }, b: { levelName: string }): number {\n    return a.levelName.localeCompare(b.levelName);\n}\n\nconst thePrefix = /the /i;\n\nexport function byIgnoreThe(a: string, b: string): number {\n    const aValue = a.replace(thePrefix, \"\");\n    const bValue = b.replace(thePrefix, \"\");\n\n    return aValue.localeCompare(bValue);\n}\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Link } from \"gatsby\";\nimport { backgroundPath } from \"../util/backgroundPath\";\n\nimport styles from \"./backgroundLink.module.css\";\n\ninterface BackgroundLinkProps {\n    className?: string;\n    levelName: string;\n    gameNameUsa: string;\n    newPage?: boolean;\n}\n\nexport const BackgroundLink: React.FunctionComponent<BackgroundLinkProps> = ({\n    className,\n    levelName,\n    gameNameUsa,\n    newPage,\n    children,\n}) => {\n    const classes = classnames(styles.root, className);\n\n    const entryPath = backgroundPath({ gameNameUsa, levelName });\n\n    children = children || `${gameNameUsa} - ${levelName}`;\n\n    if (newPage) {\n        return (\n            <a className={classes} href={entryPath} target=\"_blank\">\n                {children}\n            </a>\n        );\n    } else {\n        return (\n            <Link className={classes} to={entryPath}>\n                {children}\n            </Link>\n        );\n    }\n};\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { LazyThumbnail } from \"./lazyThumbnail\";\nimport { BackgroundLink } from \"./backgroundLink\";\n\nimport styles from \"./levelListEntry.module.css\";\n\ninterface LevelListEntryProps {\n    className?: string;\n    // TODO type this\n    thumbnailData: any;\n    linkClassName?: string;\n    levelName: string;\n    gameNameUsa: string;\n}\n\nexport const LevelListEntry: React.FunctionComponent<LevelListEntryProps> = ({\n    className,\n    linkClassName,\n    thumbnailData,\n    levelName,\n    gameNameUsa,\n    children,\n}) => {\n    const classes = classnames(styles.root, className);\n    const linkClasses = classnames(styles.backgroundLink, linkClassName);\n    return (\n        <BackgroundLink className={linkClasses} levelName={levelName} gameNameUsa={gameNameUsa}>\n            <div className={classes}>\n                <LazyThumbnail thumbnailData={thumbnailData} alt={`${levelName} from ${gameNameUsa}`} />\n                <div className={styles.levelName}>{children || levelName}</div>\n            </div>\n        </BackgroundLink>\n    );\n};\n"],"sourceRoot":""}