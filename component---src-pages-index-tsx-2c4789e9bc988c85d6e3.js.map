{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/util/slug.ts","webpack:///./src/components/backgroundLink.tsx","webpack:///./src/util/bgpath.ts","webpack:///./src/components/seo.tsx"],"names":["IndexPage","_ref","nodes","data","allGoogleSheetLeveldataRow","edges","map","e","node","bySystem","groupBy","react__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","Fragment","_components_seo__WEBPACK_IMPORTED_MODULE_7__","title","Object","keys","systemName","byGame","gatsby__WEBPACK_IMPORTED_MODULE_5__","to","slug","gameName","l","_components_backgroundLink__WEBPACK_IMPORTED_MODULE_6__","levelName","query","m","module","exports","require","default","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","__webpack_exports__","React","createContext","ProdPageRenderer","location","pageResources","InternalPageRenderer","assign","json","slugify__WEBPACK_IMPORTED_MODULE_0__","slugify__WEBPACK_IMPORTED_MODULE_0___default","str","slugify","remove","lower","backgroundLink_BackgroundLink","BackgroundLink","gameNameUsa","children","entryPath","join","bgpath","react_default","gatsby_browser_entry","SEO","_ref$description","description","_ref$lang","lang","_ref$meta","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat"],"mappings":"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","file":"component---src-pages-index-tsx-2c4789e9bc988c85d6e3.js","sourcesContent":["import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\nimport { BackgroundLink } from \"../components/backgroundLink\";\nimport Layout from \"../components/layout\";\nimport Image from \"../components/image\";\nimport SEO from \"../components/seo\";\nimport { groupBy } from \"lodash\";\nimport { slug } from \"../util/slug\";\n\ninterface BasicLevelData {\n    levelName: string;\n    gameNameUsa: string;\n}\n\ninterface IndexPageProps {\n    data: {\n        allGoogleSheetLeveldataRow: {\n            totalCount: number;\n            edges: Array<{\n                node: BasicLevelData;\n            }>;\n        };\n    };\n}\n\nconst IndexPage: React.FunctionComponent<IndexPageProps> = ({ data }) => {\n    const nodes = data.allGoogleSheetLeveldataRow.edges.map(e => e.node);\n    const bySystem = groupBy(nodes, \"system\");\n\n    return (\n        <>\n            <SEO title=\"Fighting Game Backgrounds\" />\n            <pre>FGBG</pre>\n            {Object.keys(bySystem).map(systemName => {\n                const byGame = groupBy(bySystem[systemName], \"gameNameUsa\");\n\n                return (\n                    <>\n                        <Link to={slug(systemName)}>\n                            <h2>{systemName}</h2>\n                        </Link>\n                        <ul>\n                            {Object.keys(byGame).map(gameName => (\n                                <li>\n                                    <Link to={slug(gameName)}>{gameName}</Link>\n                                    <ul>\n                                        {byGame[gameName].map(l => (\n                                            <li>\n                                                <BackgroundLink {...l}>\n                                                    {l.levelName}\n                                                </BackgroundLink>\n                                            </li>\n                                        ))}\n                                    </ul>\n                                </li>\n                            ))}\n                        </ul>\n                    </>\n                );\n            })}\n        </>\n    );\n};\n\nexport default IndexPage;\n\nexport const query = graphql`\n    query {\n        allGoogleSheetLeveldataRow {\n            totalCount\n            edges {\n                node {\n                    levelName\n                    gameNameUsa\n                    system\n                }\n            }\n        }\n    }\n`;\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import slugify from \"slugify\";\n\nexport function slug(str: string): string {\n    return slugify(str, { remove: /[*+~.()'\"!:@]/g, lower: true });\n}\n","import React from \"react\";\nimport { Link } from \"gatsby\";\nimport { bgpath } from \"../util/bgpath\";\n\ninterface BackgroundLinkProps {\n    levelName: string;\n    gameNameUsa: string;\n}\n\nexport const BackgroundLink: React.FunctionComponent<BackgroundLinkProps> = ({\n    levelName,\n    gameNameUsa,\n    children,\n}) => {\n    const entryPath = bgpath({ gameNameUsa, levelName });\n\n    children = children || `${gameNameUsa} - ${levelName}`;\n\n    return <Link to={entryPath}>{children}</Link>;\n};\n","import { slug } from \"./slug\";\n\nexport function bgpath({\n    gameNameUsa,\n    levelName,\n}: {\n    gameNameUsa: string;\n    levelName: string;\n}) {\n    return [gameNameUsa, levelName].map(slug).join(\"/\");\n}\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\ninterface SEOProps {\n  description?: string;\n  lang?: string;\n  meta: any[];\n  title: string;\n}\n\nconst SEO: React.FunctionComponent<SEOProps> = ({\n  description = \"\",\n  lang = \"en\",\n  meta = [],\n  title,\n}) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nexport default SEO\n"],"sourceRoot":""}